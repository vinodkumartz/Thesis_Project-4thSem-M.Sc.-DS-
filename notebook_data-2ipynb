{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "be1f9999",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
    "\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers, models, Input\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import xgboost as xgb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "aa6cd3a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "df= pd.read_csv('D:\\THESIS WORK(indoorcoverage)\\ThesisProject\\data\\data-2\\data2.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1a7c1cfa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>Z</th>\n",
       "      <th>AP1</th>\n",
       "      <th>AP2</th>\n",
       "      <th>AP3</th>\n",
       "      <th>AP4</th>\n",
       "      <th>AP5</th>\n",
       "      <th>AP6</th>\n",
       "      <th>AP7</th>\n",
       "      <th>...</th>\n",
       "      <th>AP480</th>\n",
       "      <th>AP481</th>\n",
       "      <th>AP482</th>\n",
       "      <th>AP483</th>\n",
       "      <th>AP484</th>\n",
       "      <th>AP485</th>\n",
       "      <th>AP486</th>\n",
       "      <th>AP487</th>\n",
       "      <th>AP488</th>\n",
       "      <th>AP489</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>172.94</td>\n",
       "      <td>72.043</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>172.94</td>\n",
       "      <td>77.043</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>167.94</td>\n",
       "      <td>77.043</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>167.94</td>\n",
       "      <td>82.043</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>167.94</td>\n",
       "      <td>87.043</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 492 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        X       Y    Z    AP1    AP2  AP3    AP4    AP5    AP6    AP7  ...  \\\n",
       "0  172.94  72.043  0.0  100.0  100.0  100  100.0  100.0  100.0  100.0  ...   \n",
       "1  172.94  77.043  0.0  100.0  100.0  100  100.0  100.0  100.0  100.0  ...   \n",
       "2  167.94  77.043  0.0  100.0  100.0  100  100.0  100.0  100.0  100.0  ...   \n",
       "3  167.94  82.043  0.0  100.0  100.0  100  100.0  100.0  100.0  100.0  ...   \n",
       "4  167.94  87.043  0.0  100.0  100.0  100  100.0  100.0  100.0  100.0  ...   \n",
       "\n",
       "   AP480  AP481  AP482  AP483  AP484  AP485  AP486  AP487  AP488  AP489  \n",
       "0  100.0  100.0  100.0  100.0  100.0  100.0  100.0  100.0  100.0  100.0  \n",
       "1  100.0  100.0  100.0  100.0  100.0  100.0  100.0  100.0  100.0  100.0  \n",
       "2  100.0  100.0  100.0  100.0  100.0  100.0  100.0  100.0  100.0  100.0  \n",
       "3  100.0  100.0  100.0  100.0  100.0  100.0  100.0  100.0  100.0  100.0  \n",
       "4  100.0  100.0  100.0  100.0  100.0  100.0  100.0  100.0  100.0  100.0  \n",
       "\n",
       "[5 rows x 492 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5bb38045",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['X', 'Y', 'Z', 'AP1', 'AP2', 'AP3', 'AP4', 'AP5', 'AP6', 'AP7',\n",
       "       ...\n",
       "       'AP480', 'AP481', 'AP482', 'AP483', 'AP484', 'AP485', 'AP486', 'AP487',\n",
       "       'AP488', 'AP489'],\n",
       "      dtype='object', length=492)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "55a242d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1428 entries, 0 to 1427\n",
      "Columns: 492 entries, X to AP489\n",
      "dtypes: float64(447), int64(45)\n",
      "memory usage: 5.4 MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7403b0c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop(columns=['X', 'Y', 'Z'])\n",
    "y = df[['X', 'Y', 'Z']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "ce65a04c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "deba4262",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (1142, 489)\n",
      "y_train shape: (1142, 3)\n",
      "X_test shape: (286, 489)\n",
      "y_test shape: (286, 3)\n"
     ]
    }
   ],
   "source": [
    "# Check the shapes\n",
    "print(\"X_train shape:\", X_train.shape)\n",
    "print(\"y_train shape:\", y_train.shape)\n",
    "print(\"X_test shape:\", X_test.shape)\n",
    "print(\"y_test shape:\", y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b27e4b05",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature scaling\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8bb238ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert DataFrame to NumPy array and reshape for LSTM/TCN/CNN input\n",
    "X_train_seq = X_train.values.reshape((X_train.shape[0], 1, X_train.shape[1]))\n",
    "X_test_seq = X_test.values.reshape((X_test.shape[0], 1, X_test.shape[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "975e8ed2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (1142, 489)\n",
      "y_train shape: (1142, 3)\n"
     ]
    }
   ],
   "source": [
    "print(\"X_train shape:\", X_train.shape)  # Should be (samples, 1, features)\n",
    "print(\"y_train shape:\", y_train.shape)  # Should be (samples, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras import models\n",
    "from tensorflow.keras import layers\n",
    "def build_bilstm():\n",
    "    model = models.Sequential([\n",
    "        layers.Input(shape=(1, X_train.shape[1])),\n",
    "        layers.Bidirectional(layers.LSTM(64, return_sequences=False)),\n",
    "        layers.Dense(32, activation='relu'),\n",
    "        layers.Dense(3)  # X, Y\n",
    "    ])\n",
    "    model.compile(optimizer='adam', loss='mse', metrics=['mae'])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "d4da29a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_transformer():\n",
    "    input_layer = Input(shape=(1, X_train.shape[1]))\n",
    "    x = layers.Dense(64)(input_layer)\n",
    "    x = layers.LayerNormalization()(x)\n",
    "    attn_output = layers.MultiHeadAttention(num_heads=4, key_dim=16)(x, x)\n",
    "    x = layers.Add()([x, attn_output])\n",
    "    x = layers.GlobalAveragePooling1D()(x)\n",
    "    x = layers.Dense(32, activation='relu')(x)\n",
    "    output = layers.Dense(3)(x)\n",
    "    model = models.Model(inputs=input_layer, outputs=output)\n",
    "    model.compile(optimizer='adam', loss='mse', metrics=['mae'])\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "6ede345e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# !pip install keras-tcn\n",
    "from tcn import TCN\n",
    "\n",
    "def build_tcn():\n",
    "    model = models.Sequential([\n",
    "        TCN(input_shape=(1, X_train.shape[1]), nb_filters=64),\n",
    "        layers.Dense(32, activation='relu'),\n",
    "        layers.Dense(3)\n",
    "    ])\n",
    "    model.compile(optimizer='adam', loss='mse', metrics=['mae'])\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_cnn_lstm():\n",
    "    model = models.Sequential([\n",
    "        layers.Conv1D(64, kernel_size=1, activation='relu', input_shape=(1, X_train.shape[1])),\n",
    "        layers.MaxPooling1D(pool_size=1),\n",
    "        layers.LSTM(64),\n",
    "        layers.Dense(32, activation='relu'),\n",
    "        layers.Dense(3)\n",
    "    ])\n",
    "    model.compile(optimizer='adam', loss='mse', metrics=['mae'])\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "db4f633d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_xgboost():\n",
    "    xgb_x = xgb.XGBRegressor()\n",
    "    xgb_y = xgb.XGBRegressor()\n",
    "    xgb_x.fit(X_train, y_train[:, 0])\n",
    "    xgb_y.fit(X_train, y_train[:, 1])\n",
    "    pred_x = xgb_x.predict(X_test)\n",
    "    pred_y = xgb_y.predict(X_test)\n",
    "    return np.column_stack([pred_x, pred_y])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "8179ca3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_autoencoder_regression():\n",
    "    input_seq = Input(shape=(1, X_train.shape[1]))\n",
    "    encoded = layers.LSTM(64)(input_seq)\n",
    "    decoded = layers.RepeatVector(1)(encoded)\n",
    "    decoded = layers.LSTM(X_train.shape[1], return_sequences=True)(decoded)\n",
    "    regression = layers.Dense(3)(encoded)\n",
    "    model = models.Model(inputs=input_seq, outputs=regression)\n",
    "    model.compile(optimizer='adam', loss='mse', metrics=['mae'])\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "00be8e08",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "d:\\THESIS WORK(indoorcoverage)\\ThesisProject\\venv\\lib\\site-packages\\keras\\src\\layers\\convolutional\\base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training BiLSTM...\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "\n",
      "Training Transformer...\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step\n",
      "\n",
      "Training CNN+LSTM...\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step \n",
      "\n",
      "Training Autoencoder...\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step \n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "models_list = {\n",
    "    'BiLSTM': build_bilstm(),\n",
    "    'Transformer': build_transformer(),\n",
    "    'CNN+LSTM': build_cnn_lstm(),\n",
    "    'Autoencoder': build_autoencoder_regression()\n",
    "}\n",
    "\n",
    "results = []\n",
    "\n",
    "for name, model in models_list.items():\n",
    "    print(f\"\\nTraining {name}...\")\n",
    "    history = model.fit(X_train_seq, y_train, validation_data=(X_test_seq, y_test),\n",
    "                        epochs=20, batch_size=32, verbose=0)\n",
    "\n",
    "    # Predictions\n",
    "    y_train_pred = model.predict(X_train_seq)\n",
    "    y_test_pred = model.predict(X_test_seq)\n",
    "\n",
    "    # Evaluation\n",
    "    loss, mae = model.evaluate(X_test_seq, y_test, verbose=0)\n",
    "    train_loss, train_mae = model.evaluate(X_train_seq, y_train, verbose=0)\n",
    "\n",
    "    # R2 and RMSE\n",
    "    r2_train = r2_score(y_train, y_train_pred)\n",
    "    r2_test = r2_score(y_test, y_test_pred)\n",
    "\n",
    "    rmse_train = np.sqrt(mean_squared_error(y_train, y_train_pred))\n",
    "    rmse_test = np.sqrt(mean_squared_error(y_test, y_test_pred))\n",
    "\n",
    "    results.append({\n",
    "        'Model': name,\n",
    "        'Train Loss': train_loss,\n",
    "        'Test Loss': loss,\n",
    "        'Train MAE': train_mae,\n",
    "        'Test MAE': mae,\n",
    "        'Train R2': r2_train,\n",
    "        'Test R2': r2_test,\n",
    "        'Train RMSE': rmse_train,\n",
    "        'Test RMSE': rmse_test\n",
    "    })\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "import numpy as np\n",
    "import xgboost as xgb\n",
    "\n",
    "def train_xgboost():\n",
    "    model = xgb.XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=6, random_state=42)\n",
    "    model.fit(X_train, y_train)\n",
    "    return model\n",
    "\n",
    "# Train\n",
    "xgb_model = train_xgboost()\n",
    "\n",
    "# Predictions\n",
    "xgb_train_preds = xgb_model.predict(X_train)\n",
    "xgb_test_preds = xgb_model.predict(X_test)\n",
    "\n",
    "# Train Metrics\n",
    "mse_train_xgb = mean_squared_error(y_train, xgb_train_preds)\n",
    "mae_train_xgb = mean_absolute_error(y_train, xgb_train_preds)\n",
    "r2_train_xgb = r2_score(y_train, xgb_train_preds)\n",
    "rmse_train_xgb = np.sqrt(mse_train_xgb)\n",
    "\n",
    "# Test Metrics\n",
    "mse_test_xgb = mean_squared_error(y_test, xgb_test_preds)\n",
    "mae_test_xgb = mean_absolute_error(y_test, xgb_test_preds)\n",
    "r2_test_xgb = r2_score(y_test, xgb_test_preds)\n",
    "rmse_test_xgb = np.sqrt(mse_test_xgb)\n",
    "\n",
    "# Append to results\n",
    "results.append({\n",
    "    'Model': 'XGBoost',\n",
    "    'Train Loss': mse_train_xgb,\n",
    "    'Test Loss': mse_test_xgb,\n",
    "    'Train MAE': mae_train_xgb,\n",
    "    'Test MAE': mae_test_xgb,\n",
    "    'Train R2': r2_train_xgb,\n",
    "    'Test R2': r2_test_xgb,\n",
    "    'Train RMSE': rmse_train_xgb,\n",
    "    'Test RMSE': rmse_test_xgb\n",
    "})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "5114b174",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Train Loss</th>\n",
       "      <th>Test Loss</th>\n",
       "      <th>Train MAE</th>\n",
       "      <th>Test MAE</th>\n",
       "      <th>Train R2</th>\n",
       "      <th>Test R2</th>\n",
       "      <th>Train RMSE</th>\n",
       "      <th>Test RMSE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BiLSTM</td>\n",
       "      <td>912.826843</td>\n",
       "      <td>883.104004</td>\n",
       "      <td>21.436817</td>\n",
       "      <td>21.071341</td>\n",
       "      <td>-0.000608</td>\n",
       "      <td>-0.000128</td>\n",
       "      <td>30.213032</td>\n",
       "      <td>29.717069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Transformer</td>\n",
       "      <td>30.637495</td>\n",
       "      <td>37.089157</td>\n",
       "      <td>3.880802</td>\n",
       "      <td>4.173428</td>\n",
       "      <td>0.633269</td>\n",
       "      <td>0.578935</td>\n",
       "      <td>5.535115</td>\n",
       "      <td>6.090087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CNN+LSTM</td>\n",
       "      <td>918.427429</td>\n",
       "      <td>887.059998</td>\n",
       "      <td>21.595516</td>\n",
       "      <td>21.188902</td>\n",
       "      <td>-0.005682</td>\n",
       "      <td>-0.005198</td>\n",
       "      <td>30.305560</td>\n",
       "      <td>29.783553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Autoencoder</td>\n",
       "      <td>15074.257812</td>\n",
       "      <td>15137.869141</td>\n",
       "      <td>93.154800</td>\n",
       "      <td>93.682907</td>\n",
       "      <td>-13.564003</td>\n",
       "      <td>-15.140273</td>\n",
       "      <td>122.777329</td>\n",
       "      <td>123.036036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>XGBoost</td>\n",
       "      <td>1.757378</td>\n",
       "      <td>20.038919</td>\n",
       "      <td>0.813013</td>\n",
       "      <td>2.337092</td>\n",
       "      <td>0.995407</td>\n",
       "      <td>0.965647</td>\n",
       "      <td>1.325661</td>\n",
       "      <td>4.476485</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Model    Train Loss     Test Loss  Train MAE   Test MAE   Train R2  \\\n",
       "0       BiLSTM    912.826843    883.104004  21.436817  21.071341  -0.000608   \n",
       "1  Transformer     30.637495     37.089157   3.880802   4.173428   0.633269   \n",
       "2     CNN+LSTM    918.427429    887.059998  21.595516  21.188902  -0.005682   \n",
       "3  Autoencoder  15074.257812  15137.869141  93.154800  93.682907 -13.564003   \n",
       "4      XGBoost      1.757378     20.038919   0.813013   2.337092   0.995407   \n",
       "\n",
       "     Test R2  Train RMSE   Test RMSE  \n",
       "0  -0.000128   30.213032   29.717069  \n",
       "1   0.578935    5.535115    6.090087  \n",
       "2  -0.005198   30.305560   29.783553  \n",
       "3 -15.140273  122.777329  123.036036  \n",
       "4   0.965647    1.325661    4.476485  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_df = pd.DataFrame(results)\n",
    "results_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "1b6ff47a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA90AAAHqCAYAAAAZLi26AAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjMsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvZiW1igAAAAlwSFlzAAAPYQAAD2EBqD+naQAAcKxJREFUeJzt3Qm8VfP3//FVtznNadIgonmggVJJs8zzEKJkjJJvypQGpFISEZEMRWZJkkpC0SwlCVGkQpPm6fwf7/X/7ePeJqm77xl6PR+P495zzj7nfu6x23evvdZnfTJFIpGIAQAAAACAdJc5/d8SAAAAAAAIQTcAAAAAACEh6AYAAAAAICQE3QAAAAAAhISgGwAAAACAkBB0AwAAAAAQEoJuAAAAAABCQtANAAAAAEBICLoBAAAAAAgJQTcAAHHk2muvtWOPPTbWwwAAAOmEoBsAgIOQKVOmg7pNmTLFjhQZ+Zls3rzZevTocdDvpe30s998883D/tkAAByOLIf1agAAjhAvv/xymvsvvfSSffzxx3s9XrFixcP6OcOGDbPdu3dbIsiozyQIunv27OnfN2rU6LDfDwCAjELQDQDAQbjqqqvS3P/yyy89wNzz8X0Fi7ly5Tron5M1a1ZL9s8EAIAjCeXlAACkE2Vgq1SpYrNnz7aGDRt6sH3PPff4c++9956dddZZVqJECcuePbsdf/zx1rt3b9u1a9cB53T//PPPXib96KOP2rPPPuuv0+tr165tM2fOPOB4Zs2a5a998cUX93ruo48+8ufGjh3r9//++2/r1KmT/2y9f5EiRaxZs2Y2Z86cw/pMlLUfNGiQVa5c2XLkyGFFixa1G2+80dauXbvXWFu0aGGFCxe2nDlzWtmyZa1t27bRz+Doo4/275XtDsrWVW5+uH766Se75JJLrGDBgv7/69RTT7UPPvhgr+2eeOIJ/x20TYECBaxWrVo2atSo6PNhfX4AgMRHphsAgHT0119/2ZlnnmmXX365Z3wVZMqIESPsqKOOss6dO/vXyZMnW/fu3W3Dhg3Wv3//f31fBXgK7BSwKuDs16+fXXjhhR407i87rsDwuOOOs9dff93atGmT5rnRo0d78KhAV2666Saf/9yhQwerVKmS/x6ff/65LVq0yE4++eRD/jw0Xv3u1113nd1+++22dOlSe/LJJ23u3Ln2xRdf+NhXr15tzZs398C6W7dulj9/fg+03377bX8PPf7000/bzTffbBdccIH/3lKtWjU7HKtWrbJ69ep5NYLGVqhQIb9Ace655/pnoZ8VlPzr+Ysvvtg6duxoW7dutfnz59tXX31lV155ZaifHwAgCUQAAMB/duutt0b2/DN6+umn+2NDhw7da/vNmzfv9diNN94YyZUrV2Tr1q3Rx9q0aRMpU6ZM9P7SpUv9PQsVKhRZs2ZN9PH33nvPH3///fcPOM677747kjVr1jSv3bZtWyR//vyRtm3bRh/Lly+f/07p+Zl89tlnfn/kyJFpths/fnyax9955x2/P3PmzP2+9x9//OHbPPDAAwc1lk8++cS3f+ONN/a7TadOnXwbjTPw999/R8qWLRs59thjI7t27fLHzjvvvEjlypUP+PPS4/MDACQnyssBAEhHKi1WVndPKpkOKGP9559/WoMGDTzL+t133/3r+1522WWemQ7otaJM97+9bseOHdGssUyYMMHWrVvnzwWUXVbmdsWKFZZe3njjDcuXL5+XWev3DW41a9b0bP8nn3wS/dmiUneNNaOMGzfO6tSpY/Xr148+pnHdcMMNnmn/9ttvo+P79ddfD1jOH8bnBwBIDgTdAACko2OOOcayZcu21+MLFy70cmUFoXnz5vWS6aDh2Pr16//1fUuXLp3mfhCA7zk3ek/Vq1e3ChUqeDl5QN9r7nTjxo2jj6lcfcGCBVaqVCkPRDVf+t8C+n+zZMkS/900v1m/b+rbxo0bvaxcTj/9dLvooot8vrbGdd5559kLL7xg27ZtszD98ssvVr58+b0eD7qt63np2rWrB+P6XE444QS79dZbvTQ+tTA+PwBAciDoBgAgHaXOaAeUVVZg+fXXX1uvXr3s/fff9y7fffv29ecPZomwlJSUfT4eiahC+sCU0VZWWVlmBbJjxozxIDdLln9au1x66aUeJKphmJq9aZ65God9+OGHdqj0eyng1u+6r5s+CwnW054+fbrPif7tt9+8iZoy4grOY01B+OLFi+21117zrPhbb73lXx944IFQPz8AQHIg6AYAIGRTpkzxxlpqKKZGXGeffbY1bdo0Tbl4mBR079y504NFBYFq3qZGb3sqXry43XLLLfbuu+96wzM1FnvooYcO+eeq07p+79NOO81/3z1vysKnps7h+nnqZD5y5EivDlCgGwTm6a1MmTIeTO8pKPfX84HcuXP756gM/LJly7wTvcaqpmphfX4AgORA0A0AQMiCLHXqrPT27dvtqaeeyrBMbdWqVb2sXDcFh1rSLKBly/YscVeGWhnbwynxVvZX762l0fakiwCqAAhK5PfM2NeoUcO/Bj8/WOs8eE16aNWqlc2YMcMz7IFNmzb50mxa+ktdyEUXDlLT9AE9pzFrDnpYnx8AIDmwZBgAACHTslTKamvZLi09paztyy+/fFCl4elFWVotUaa1stu1a2eZM2dO09itZMmSviSWss+avzxx4kRvHDZgwIBD/pkqqdeSYX369LF58+b5smBaIkxzvdVk7fHHH/efqWW6dAFCc96VHdd4tEyX5r4rMA7K9hXo6qLBiSee6Otqa0103Q5E2f19NarT/wstT/bqq6/6Em/6/6L31FiUpdbrgs9I4y5WrJhn7LUEnJYB07JnynbnyZPHLwSE8fkBAJIDQTcAACFTmbE6c99555123333eQCuJmpNmjSJrpOdEUG3fra6pafuWh5kkVUWra7m6nKuudjlypXzQFhrYx+OoUOH+tzsZ555xu655x6fR64ssn5/BbFBcK6Ms0rJtXa2ms2pGZlKzMuWLRt9r+eee85uu+02u+OOO7xSQHOq/y3oDsrT99SoUSOflz1t2jRvlKa52CoV19rfmnOvgDqgCwcay8CBA32OuQJsBen6PMP+/AAAiS+T1g2L9SAAAAAAAEhGzOkGAAAAACAkBN0AAAAAAISEoBsAAAAAgJAQdAMAAAAAEBKCbgAAAAAAQkLQDQAAAABASFinO51oTc4VK1ZYnjx5LFOmTLEeDgAAAAAgRFp9+++//7YSJUpY5sz7z2cTdKcTBdylSpWK9TAAAAAAABlo+fLlVrJkyf0+T9CdTpThDj7wvHnzxno4SWvHjh02YcIEa968uWXNmjXWwwEOGfsykgn7M5IF+zKSBftyxtiwYYMnXoNYcH8IutNJUFKugJugO9wDSK5cufwz5gCCRMa+jGTC/oxkwb6MZMG+nLH+bXoxjdQAAAAAAAgJQTcAAAAAACEh6AYAAAAAICTM6QYAAACAdLRr1y6fVx0r+tlZsmSxrVu3+lhwaDQfPiUlxQ4XQTcAAAAApNO6zStXrrR169bFfBzFihXzlZX+rckXDix//vz+WR7O50jQDQAAAADpIAi4ixQp4t3DYxXw7t692zZu3GhHHXWUZc7MjOJDvXCxefNmW716td8vXry4HSqCbgAAAAA4TCrjDgLuQoUKxXQsCrq3b99uOXLkIOg+DDlz5vSvCrz1//VQS835PwAAAAAAhymYw60MN5JHrv/7/3k4c/QJugEAAAAgnTCHOrlkSof/nwTdAAAAAACEhKAbAAAAAICQEHQDAAAAQJK49tprveFXgQIFLHv27Fa0aFFr1qyZDR8+3BusHawRI0b4clmxGP/5559vyYSgGwAAAACSSIsWLey7776zn376yT788EM744wzrGPHjnb22Wfbzp07Yz28Iw5BNwAAAAAkkSDDfcwxx9jJJ59s99xzj7333nsegCuDLQMHDrSqVata7ty5rVSpUnbLLbf42t4yZcoUu+6662z9+vXeSEy3Hj16+HMvv/yy1apVy/LkyWPFihWzK6+8MrqWtaxdu9Zat25tRx99tC+5dcIJJ9gLL7wQfX758uV26aWXeha9YMGCdt5559nPP//sz+lnvPjiiz7W4OdqLImOdboBAACAVH7tW9dSdm+L9TDiUunu38R6CDhEjRs3turVq9vbb79t119/va/fPXjwYCtbtqxnxBV033XXXfbUU09ZvXr1bNCgQda9e3dbvHixv/6oo46KLp3Vu3dvK1++vAfbnTt39pLwcePG+fP333+/ffvttx7gFy5c2H744QfbsmVL9LXKwtetW9c+++wzy5Iliz344IPWsmVLmz9/vv3vf/+zRYsW2YYNG6KBugLzREfQDQAAcASp2eWlWA8hbmVLMetWN1+shwGEpkKFCh7cSqdOnaKPH3vssR783nTTTR50Z8uWzfLly+eZZmWzU2vbtm30++OOO84D99q1a3uWXIH5smXL7KSTTvJsePDegdGjR/u88ueeey66FJeCa2W9ldFu3ry5Z8e3bdu2189NZJSXAwAAAMARIBKJRIPdiRMnWpMmTbwEXaXiV199tf3111+2efPmA77H7Nmz7ZxzzrHSpUv7604//XR/XMG23Hzzzfbaa69ZjRo1PHM+bdq06Gu//vprz3zrdQrQdVMme+vWrfbjjz9asiLoBgAAAIAjgEq3VU6uOdRqqlatWjV76623PJAeMmSIb7N9+/b9vn7Tpk1eHp43b14bOXKkzZw509555500rzvzzDPtl19+sTvuuMNWrFjhgb3KxkXZ8Jo1a9q8efPS3L7//nufG56sKC8HAAAAgCQ3efJk++abbzwYVpCtMu8BAwb43G55/fXX02yvEvNdu3aleUwd0ZUNf+SRR7z5msyaNWuvn6Umam3atPFbgwYNrEuXLvboo496UzeVmBcpUsQD933Z189NdGS6AQAAACCJaE70qlWr7LfffrM5c+bYww8/7F3Cld2+5pprrFy5ct7U7IknnvAmaupIPnTo0DTvobnYykxPmjTJ/vzzTy87V0m5guLgdWPGjPGmaqmp+Zq6j6uMfOHChTZ27FirWLGiP6eu5mquprGokdrSpUt9Lvftt99uv/76a/Tnat65Grjp52qciY6gGwAAAACSyEcffeRN09ToTJ3BP/nkE294pmA4JSXFu5hrybC+fftalSpVvFS8T58+ad5DHczVWO2yyy7zzHW/fv38q5Yce+ONN6xSpUqe8VYGOzUF5XfffbeXrjds2NB/nuZ4S65cuWzq1KkevF944YUejLdr187ndAeZ7/bt23tndDVi08/74osvLNFlimg2PQ6b2tqrw5/WsttfqQQOn650aTmCVq1aWdasWWM9HOCQsS8jmbA/Jxa6l/979/Jq3/RmybD9YMmw/VPgqMyt5kznyJEjpmNR6bjiE8UlQfk40v//68HGgPwfAAAAAAAgJATdAAAAAACEhKAbAAAAAICQEHQDAAAAABASgm4AAAAAAEJC0A0AAAAAQEgIugEAAAAACAlBNwAAAAAAISHoBgAAAAAgJATdAAAAAIB0c+yxx9qgQYNiPYy4kSXWAwAAAACAZFWzy0sZ+vNm97/moLfNlCnTAZ9/4IEHrEePHv95DDNnzrTcuXPb4WjUqJHVqFEjKYJ3gm4AAAAAOAL9/vvv0e9Hjx5t3bt3t8WLF0cfO+qoo6LfRyIR27Vrl2XJ8u8h5NFHHx3CaBNXTMvLp06dauecc46VKFHCr7K8++67+932pptu8m32vNKxZs0aa926teXNm9fy589v7dq1s40bN6bZZv78+dagQQPLkSOHlSpVyvr167fX+7/xxhtWoUIF36Zq1ao2bty4dPxNAQAAACC+FCtWLHrLly+fx1vB/e+++87y5MljH374odWsWdOyZ89un3/+uf3444923nnnWdGiRT0or127tk2cOPGA5eWZMmWy5557zi644ALLlSuXnXDCCTZmzJjDGvtbb71llStX9nHp5w0Y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awX0yoarPF3vn3ot73r16tmoUaP8depmp8XS3333XatSpUo6/8YAAAAAgCNJTDPd+7t6sj97XjERZcUVMB+IJsarhOBA1C5eNwAAAAAAjoh1ugEAAAAASGQE3QAAAAAAhISgGwAAAACAkBB0AwAAAAAQEoJuAAAAAABCQtANAAAAAEBICLoBAAAAAAgJQTcAAAAAACHJEtYbAwAAAMCRblmvqhn680p3/+agt82UKdMBn3/ggQesR48ehzQOvfc777xj559/frpsl8gIugEAAADgCPT7779Hvx89erR1797dFi9eHH3sqKOOitHIkgvl5QAAAABwBCpWrFj0li9fPs86p37stddes4oVK1qOHDmsQoUK9tRTT0Vfu337duvQoYMVL17cny9Tpoz16dPHnzv22GP96wUXXODvGdz/r3bv3m29evWykiVLWvbs2a1GjRo2fvz4gxpDJBLxLH3p0qX9tSVKlLDbb7/dYoFMNwAAAAAgjZEjR3rm+8knn7STTjrJ5s6da+3bt7fcuXNbmzZtbPDgwTZmzBh7/fXXPbBdvny532TmzJlWpEgRe+GFF6xly5aWkpJySGN4/PHHbcCAAfbMM8/4GIYPH27nnnuuLVy40E444YQDjuGtt96yxx57zC8cVK5c2VauXGlff/21xQJBNwAAAABgr/ncCngvvPBCv1+2bFn79ttvPQBW0L1s2TIPfOvXr+/ZbGWZA0cffbR/zZ8/v2fMD9Wjjz5qXbt2tcsvv9zv9+3b1z755BMbNGiQDRky5IBj0HP62U2bNrWsWbN6UF6nTh2LBcrLAQAAAABRmzZtsh9//NHatWvn87qD24MPPuiPy7XXXmvz5s2z8uXLe9n2hAkT0nUMGzZssBUrVthpp52W5nHdX7Ro0b+O4ZJLLrEtW7bYcccd5xl6NWvbuXOnxQJBNwAAAAAgauPGjf512LBhHtQGtwULFtiXX37pz5188sm2dOlS6927twe3l156qV188cUZOs6TDzCGUqVKeVM4zUPPmTOn3XLLLdawYUPbsWOHZTSCbgAAAABAVNGiRb3x2E8//WTlypVLc1OZeSBv3rx22WWXeXCu7ueaR71mzRp/TiXdu3btOuQx6L01hi+++CLN47pfqVKlgxqDgu1zzjnH535PmTLFpk+fbt98c/BLqqUX5nQDAAAAANLo2bOnl2yrq7ma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+nYAAAAAACSt/1xePmDAAGvRooVVqlTJtm7daldeeaUtWbLEChcubK+++mo4owQAAAAA4EgIukuWLGlff/21vfbaazZ//nzPcrdr185at26dprEaAAAAAABHuiyH9KIsWeyqq65K/9EAAAAAAHAkB90vvfTSAZ+/5pprDmc8AAAAAAAcuUG31ulObceOHbZ582ZfQixXrlwE3QAAAAAAHGr38rVr16a5aU734sWLrX79+jRSAwAAAADgcILufTnhhBPskUce2SsLfri0Hvj9999vZcuW9SZtxx9/vPXu3dsikUh0G33fvXt3K168uG/TtGlT76ae2po1a7zRW968eS1//vze+E0XC1JTU7gGDRpYjhw5rFSpUtavX790/V0AAAAAAEeedAm6g+ZqK1assPTUt29fe/rpp+3JJ5+0RYsW+X0Fw0888UR0G90fPHiwDR061L766ivLnTu3L2mm5cwCCrgXLlxoH3/8sY0dO9amTp1qN9xwQ/T5DRs2+PrjZcqUsdmzZ1v//v2tR48e9uyzz6br7wMAAAAAOLL85zndY8aMSXNfmebff//dA+PTTjstPcdm06ZNs/POO8/OOussv3/sscd6CfuMGTOiP3vQoEF23333+XZBo7eiRYvau+++a5dffrkH6+PHj7eZM2darVq1fBsF7a1atbJHH33USpQoYSNHjrTt27fb8OHDfW565cqVbd68eTZw4MA0wTkAAAAAAKEG3eeff36a+5kyZbKjjz7aGjdubAMGDLD0VK9ePc82f//993biiSf6+uCff/65B8OydOlSW7lypZeUB/Lly2ennHKKTZ8+3YNufVVJeRBwi7bPnDmzZ8YvuOAC36Zhw4YecAeULVdmXfPWCxQosNfYtm3b5rfU2fKgsZxuCEfw2fIZI9GxLyOZsD8nlmwpsR5B/H82uzL/c06ItPh3nhg4LmeMg/18/3PQvXv3bsso3bp182C2QoUKlpKS4nO8H3roIS8XFwXcosx2arofPKevRYoU2asUvmDBgmm20bzxPd8jeG5fQXefPn2sZ8+eez0+YcIE7+KOcGmqAJAM2JeRTNifE0O3uvliPYS4t7By11gPIW7NHzcu1kPAf8BxOVxaxSuUoDsjvf766176PWrUqGjJd6dOnbwkvE2bNjEd2913322dO3eO3tfFATVg09xwNWxDeFeTdPBo1qyZ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a5MnT7bXX3/dPvjggxj81gAAAACAZBHXQffB0LJemTNntosuusi7iavr+FNPPRV9PiUlxcaOHevdyhWMK2hv06aN9erVK7qNlgtTgK01vx9//HErWbKkPffcc/5eAAAAAAAcMUH3lClT0txXgzWtua3b/pQpU8bG/UunxUaNGtncuXPTbZwAAAAAAMT1nG4AAAAAABIZQTcAAAAAACEh6AYAAAAAICQE3QAAAAAAhISgGwAAAACAkBB0AwAAAAAQEoJuAAAAAABCQtANAAAAAEBICLoBAAAAAAgJQTcAAAAAACEh6AYAAAAAICQE3QAAAAAAhISgGwAAAACAkBB0AwAAAAAQEoJuAAAAAABCQtANAAAAAEBICLoBAAAAAAgJQTcAAAAAACEh6AYAAAAAICQE3QAAAAAAhISgGwAAAACAkBB0AwAAAAAQEoJuAAAAAABCQtANAAAAAEBICLoBAAAAAAgJQTcAAAAAACEh6AYAAAAAICQE3QAAAAAAhISgGwAAAACAkBB0AwAAAAAQEoJuAAAAAABCQtANAAAAAMCRGHT36dPHateubXny5LEiRYrY+eefb4sXL06zzdatW+3WW2+1QoUK2VFHHWUXXXSRrVq1Ks02y5Yts7POOsty5crl79OlSxfbuXNnmm2mTJliJ598smXPnt3KlStnI0aMyJDfEQAAAACQvOI66P700089oP7yyy/t448/th07dljz5s1t06ZN0W3uuOMOe//99+2NN97w7VesWGEXXnhh9Pldu3Z5wL19+3abNm2avfjiix5Qd+/ePbrN0qVLfZszzjjD5s2bZ506dbLrr7/ePvroowz/nQEAAAAAySOLxbHx48enua9gWZnq2bNnW8OGDW39+vX2/PPP26hRo6xx48a+zQsvvGAVK1b0QP3UU0+1CRMm2LfffmsTJ060okWLWo0aNax3797WtWtX69Gjh2XLls2GDh1qZcuWtQEDBvh76PWff/65PfbYY9aiRYuY/O4AAAAAgMQX15nuPSnIloIFC/pXBd/Kfjdt2jS6TYUKFax06dI2ffp0v6+vVatW9YA7oEB6w4YNtnDhwug2qd8j2CZ4DwAAAAAAki7Tndru3bu97Pu0006zKlWq+GMrV670THX+/PnTbKsAW88F26QOuIPng+cOtI0C8y1btljOnDn3Gs+2bdv8FtC2oosAuiEc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OXPsyiuvtC+//DLWQwIyPIOydu1aGzNmjHXt2tUaN25smTNzyEdi0AnePffcY9OmTbNHHnnE3n777VgPCUhXy5cvt/fee8969+5tZ511VqyHA0T9+uuvdu211/pFobfeesvq1Knj59M4PJyBIWmvILdv396vIB977LHWokUL++KLL2I9LCDD9n9VeNSuXdvmzp1rVatW9ceZM4hEkS1bNqtYsaIVKlTIqlWrZgMGDLB333031sMC0sXs2bPtpptuss8//zx6fKYSCfFi8+bNtmbNGr9g37p1a3vxxRetbt267KOHiaAbSatChQr2008/efDdrl07a9WqlWdNgCOB/kAWLlzYy8IWL17sfyyZM4hEmUOoffV///uflSxZ0i8WlStXzh5++GHPDAKJLnfu3LZp0yZbtGhR9LxElUhcGEWsaR888cQT/bxZ0zSPO+44v/gZ7KME3oeOoBtJ0+Rh+/btaR6vXLmyXXfddfbUU0/ZLbfcYmeffbaXcBF440ihaRWnnnqq9e3b1ys9+GOJRGiapjmEOvFTYHLOOedYiRIlrFOnTla2bFl76KGHCLyRcPYMppUUeP75571ngfbn0aNH++O62ETgjVjRvqd9UOfVqhIdOnSoB92PPfaYvfHGG74NgfehI+hGwtMJ2vz586169eo2ePBg+/jjj6PP6YQtR44cfjL30ksvWdOmTT3wZo43kklwkqasti4yPfnkkzZu3Dh/TBeZihUrZm3btvWSc/5YIl6bpmkakOZvr1y50nbu3Okl5mqG+eijj/r3mvt6/PHHe+BNczUkWiCjLuXPPPOM9erVy+fHal9+4oknPIs4bNgwe/311317Am/Ecj/VPO7bb7/dE1fXX3+9H391nq19V/O7g8BbTVpprvbfEHQjYQXBg67I9enTx0toNedPBws1gPj000+tSpUqVqZMGbv33nv9oKHAW0F3vXr1bMaMGbH+FYB0oT+U+mOoKRTKmkycONEuvvhiD05E+3rBggV9qoW65BJ4I57ooqjmDmp+a/fu3f14rQaYP/zwgwfiHTt29BM+lTzedtttniW888477cMPP4z10IGDPj6fd955ni3UfO5atWrZoEGDPIv4+OOPW9asWW348OH28ssvR18DxGI/veyyyyxnzpy2ZMkSf1zH24EDB1qWLFk8863+Gj169PCk1urVq2M97IRC0I2E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MsQDbnJEABIZQTcAAADiQuq1ubX83ezZs9M8DgCJiKAbAAAAcaVo0aL2wAMP+CoSWv4OABIZQTcAAADijpYGq127tpUoUSLWQwGAw0IjNQAAAMQlLRuWI0eOWA8DAA4LQTcAAAAAACGhvBwAAAAAgJAQdAMAAAAAEBKCbgAAAAAAQkLQDQAAAABASAi6AQAAAAAICUE3AAAAAAAhIegGAADpbsqUKZYpUyZbt27dQb/m2GOPtUGDBoU6LgAAMhpBNwAAR6Brr73Wg+Kbbrppr+duvfVWf07bAACAw0PQDQDAEapUqVL22muv2ZYtW6KPbd261UaNGmWlS5eO6dgAAEgWBN0AAByhTj75ZA+833777ehj+l4B90knnRR9bNu2bXb77bdbkSJFLEeOHFa/fn2bOXNmmvcaN26cnXjiiZYzZ04744wz7Oeff97r533++efWoEED30Y/V++5adOmkH9LAABii6AbAIAjWNu2be2FF16I3h8+fLhdd911aba566677K233rIXX3zR5syZY+XKlbMWLVrYmjVr/Pnly5fbhRdeaOecc47NmzfPrr/+euvWrVua9/jxxx+tZcuWdtFFF9n8+fNt9OjRHoR36NAhg35TAABig6AbAIAj2FVXXeXB7y+//OK3L774wh8LKBP99NNPW//+/e3MM8+0SpUq2bBhwzxb/fzzz/s2ev7444+3AQMGWPny5a1169Z7zQfv06ePP96pUyc74YQTrF69ejZ48GB76aWXvKQdAIBklSXWAwAAALFz9NFH21lnnWUjRoywSCTi3xcuXDhNhnrHjh122mmnRR/LmjWr1alTxxYtWuT39fWUU05J875169ZNc//rr7/2DPfIkSOjj+nn7d6925YuXWoVK1YM8bcEACB2CLoBADjCqcQ8KPMeMmRIKD9j48aNduONN/o87j3RtA0AkMwIugEAOMJprvX27dt9mTDN1U5NZePZsmXzsvMyZcr4Y8p8q5GaSsVFWeoxY8aked2XX365V9O2b7/91ueDAwBwJGFONwAAR7iUlBQvEVdQrO9Ty507t918883WpUsXGz9+vG/Tvn1727x5s7Vr18630VrfS5Ys8W0WL17sS46pXD21rl272rRp0zyjrmZr2v69996jkRoAIOkRdAMAAMubN6/f9uWRRx7xruNXX321Z6x/+OEH++ijj6xAgQLR8nB1N3/33XetevXqNnToUHv44YfTvEe1atXs008/te+//96XDdOSZN27d7cSJUpkyO8HAECsZIqoiwkAAAAAAEh3ZLoBAAAAAAgJQTcAAAAAACEh6AYAAAAAICQE3QAAAAAAhISgGwAAAACAkBB0AwAAAAAQEoJuAAAAAABCQtANAAAAAEBICLoBAAAAAAgJQTcAAAAAACEh6AYAAAAAICQE3QAAAAAAWDj+H7tumj7EXT6AAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "\n",
    "# Convert to DataFrame if not already\n",
    "results_df = pd.DataFrame(results)\n",
    "\n",
    "# Round for cleaner display\n",
    "results_df_rounded = results_df.round(4)\n",
    "\n",
    "# Plot function\n",
    "def plot_metric_pair(df, train_metric, test_metric, title):\n",
    "    melted_df = df[['Model', train_metric, test_metric]].melt(id_vars='Model', var_name='Dataset', value_name='Value')\n",
    "\n",
    "    plt.figure(figsize=(10, 5))\n",
    "    sns.barplot(data=melted_df, x='Model', y='Value', hue='Dataset')\n",
    "    plt.title(title)\n",
    "    plt.xticks(rotation=45)\n",
    "    plt.tight_layout()\n",
    "    plt.grid(True)\n",
    "    plt.show()\n",
    "\n",
    "# 🔢 Plotting all relevant metric pairs\n",
    "plot_metric_pair(results_df_rounded, 'Train Loss', 'Test Loss', 'Train vs Test Loss')\n",
    "plot_metric_pair(results_df_rounded, 'Train MAE', 'Test MAE', 'Train vs Test MAE')\n",
    "plot_metric_pair(results_df_rounded, 'Train RMSE', 'Test RMSE', 'Train vs Test RMSE')\n",
    "plot_metric_pair(results_df_rounded, 'Train R2', 'Test R2', 'Train vs Test R² Score')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6036d88",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f52ba031",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
